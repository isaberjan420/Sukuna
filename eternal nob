repeat task.wait() until game:IsLoaded()
wait(1)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local T = {
    TextColor = Color3.fromRGB(192, 192, 192),

    Background = Color3.fromRGB(18, 18, 18),
    Topbar = Color3.fromRGB(32, 32, 32),
    Shadow = Color3.fromRGB(0, 0, 0),

    NotificationBackground = Color3.fromRGB(20, 20, 20),
    NotificationActionsBackground = Color3.fromRGB(128, 128, 128),

    TabBackground = Color3.fromRGB(80, 80, 80),
    TabStroke = Color3.fromRGB(85, 85, 85),
    TabBackgroundSelected = Color3.fromRGB(210, 210, 210),
    TabTextColor = Color3.fromRGB(240, 240, 240),
    SelectedTabTextColor = Color3.fromRGB(50, 50, 50),

    ElementBackground = Color3.fromRGB(35, 35, 35),
    ElementBackgroundHover = Color3.fromRGB(40, 40, 40),
    SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
    ElementStroke = Color3.fromRGB(50, 50, 50),
    SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
            
    SliderBackground = Color3.fromRGB(16, 16, 16),
    SliderProgress = Color3.fromRGB(16, 192, 16),
    SliderStroke = Color3.fromRGB(0, 0, 0),

    ToggleBackground = Color3.fromRGB(30, 30, 30),
    ToggleEnabled = Color3.fromRGB(0, 146, 214),
    ToggleDisabled = Color3.fromRGB(100, 100, 100),
    ToggleEnabledStroke = Color3.fromRGB(0, 170, 255),
    ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
    ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
    ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),

    DropdownSelected = Color3.fromRGB(40, 40, 40),
    DropdownUnselected = Color3.fromRGB(30, 30, 30),

    InputBackground = Color3.fromRGB(30, 30, 30),
    InputStroke = Color3.fromRGB(65, 65, 65),
    PlaceholderColor = Color3.fromRGB(178, 178, 178)
}

local DR_D = false
local DR_S = false

local function Back_Position(Part, Studs)
    local Position = Part.Position
    local CFrame = Part.CFrame
    local Vector = -CFrame.LookVector
  
    local Output = Position + Vector * Studs
    return Output
end

local function ragdolled(character)
    local r = false
    for i,v in pairs(character:GetChildren()) do
        if string.sub(v.Name, 1, 4) == "Fake" then
            r = true
        end
    end
    return r
end

local function reversed(character)
    local a = false
    for i,v in pairs(character:GetChildren()) do
        if v.Name == "Reversed" then
            a = true
        end
    end
    return a
end

local function IsSteve(character)
    local a = false
    for i,v in pairs(character:GetChildren()) do
        if v.Name == "stevebody" then
            a = true
        end
    end
    return a
end

local function Get_Closest_Player(Part)
    local closestPlayer = nil
    local minDistance = math.huge
  
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
      if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("Humanoid").Health > 0 then
        if player.Name == Players.LocalPlayer.Name then
            task.wait()
        elseif IsSteve(player.Character) then
            task.wait()
            print("attempt to hit steve")
        elseif ragdolled(player.Character) then
            task.wait()
            print("attempt to hit ragdolled")
        elseif reversed(player.Character) then
            task.wait()
            print("attempt to hit reversed")
        elseif table.find(Whitelist, player.Name) then
            task.wait()
            print("attempt to hit whitelisted")
        elseif wl1 == player.DisplayName then
            task.wait()
            print("attempt to hit Wwwhitelisted")
        elseif wl2 == player.DisplayName then
            task.wait()
            print("attempt to hit Wwwhitelisted")
        elseif wl3 == player.DisplayName then
            task.wait()
            print("attempt to hit Wwwhitelisted")
        else
            local distance = (Part.Position - player.Character:FindFirstChildWhichIsA("Part").Position).Magnitude -- Calculate distance
            if distance < minDistance then -- Check if closer than current closest
                minDistance = distance -- Update minimum distance
                closestPlayer = player -- Update closest player
            end
        end
      end
    end
  
    return closestPlayer
end

local function drs()
    while task.wait(1) do
        if DR_S == true then
            fireclickdetector(workspace.Lobby.Meteor.ClickDetector)
            wait()
            ReplicatedStorage.GeneralAbility:FireServer(256, 9)
        end
    end
end

local function drd()
    while task.wait(1) do
        if DR_D == true then
            fireclickdetector(workspace.Lobby.Meteor.ClickDetector)
            wait()
            ReplicatedStorage.GeneralAbility:FireServer(512, 25)
        end
    end
end

local function ac()
    while task.wait(1) do
        if AC == true then
            fireclickdetector(workspace.Lobby.Shukuchi.ClickDetector)
            local x = Get_Closest_Player(Players.LocalPlayer.Character.Head)
            wait()
            ReplicatedStorage.SM:FireServer(x)
        end
    end
end

local Window = Rayfield:CreateWindow({
   Name = "nob | rob junior",
   Icon = "crown", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Boss Script",
   LoadingSubtitle = "By Celerity",
   Theme = T, -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Celerity"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "de7SVVyF3e", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "nob | rob junior",
      Subtitle = "Key System",
      Note = "You Can Buy A Custom Key To The Script From Our Server", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"JanetLava862_IBY"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local SA = Window:CreateTab("Moveset", "swords")

local Position = SA:CreateToggle({
   Name = "Boss Position (Starter)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   if Value == true then
       Players.LocalPlayer.Character:MoveTo(Vector3.new(0, 16, 0))
       wait()
       Players.LocalPlayer.Character.Torso.Anchored = true
   elseif Value == false then
       Players.LocalPlayer.Character.Torso.Anchored = false
       Players.LocalPlayer.Character:MoveTo(Vector3.new(0, -5, 0))
   end
   end,
})

local Doomsday_Rain_Dramatic = SA:CreateToggle({
   Name = "Doomsday Rain (Dramatic)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   DR_D = Value
   end,
})

local Doomsday_Rain_Swift = SA:CreateToggle({
   Name = "Doomsday Rain (Swift)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   DR_S = Value
   end,
})

local Auto_Counter = SA:CreateToggle({
   Name = "Auto Counter",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
    AC = Value
   end,
})

local Golden_Form = SA:CreateButton({
   Name = "Golden Aura",
   Callback = function()
   fireclickdetector(workspace.Lobby:FindFirstChild("Guardian Angel").ClickDetector)
   wait()
   ReplicatedStorage:FindFirstChild("GeneralAbility"):FireServer()
   end,
})

local co1 = coroutine.create(drs)
local co2 = coroutine.create(drd)
local co3 = coroutine.create(ac)

coroutine.resume(co1)
coroutine.resume(co2)
coroutine.resume(co3)
